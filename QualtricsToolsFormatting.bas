Attribute VB_Name = "QualtricsTools"
''Updated 5/26/17

Sub define_styles_summary_report()

    'After defining table styles, you MUST  edit table style
        'to uncheck "allow spacing between cells" box!

    Call Define_Matrix_Style
    Call define_appendix_table_style
    Call define_mc_table_style
    Call define_question_style
    Call define_preview_text_styles
    Call define_info_table_style

End Sub


Sub insert_header_footer()

With ActiveDocument

    Call Insert_header
    Call Insert_footer
    
End With

End Sub

Sub format_survey_summary_body()

    Application.ScreenUpdating = False

    'This macro should be used BEFORE any manual updates to the survey preview
    
    Dim i As Integer
    Dim ncol As Integer
    Dim nrow As Integer
    Dim ntables As Integer
    
    
    'This calls the formatting macros in order

    'Change global font and spacing, format title header
    
    Call Preview_Style_Change
    Call number_of_respondents
    
    Call replace_newline
    Call RemoveEmptyParagraphs
    
    With ActiveDocument

    ntables = .Tables.Count
    
    For i = 1 To ntables
        ncol = .Tables(i).Columns.Count
        nrow = .Tables(i).Rows.Count
'        Debug.Print ncol

'        .Tables(i).AllowPageBreaks = False

        'We have one macro that will iterate through each table and perform
        'the appropriate formatting functions
        Call format_preview_tables(i, ncol)
        If ncol = 1 Then
            Call format_See_Appendix(i)
            Call format_UserNote(i)
        ElseIf ncol > 1 Then
            Call Replace_zeros(i)
            Call Replace_NaN(i)
            Call keepTableWithQuestion(i)
        End If

    Next
    
    Call number_questions_field
    
    Call na_table_formatting_separate
    
    Call insert_background_table_placeholder
    
    End With
    
'    Application.ScreenUpdating = True
    
End Sub

Sub format_survey_summary_appendix()

Application.ScreenUpdating = False
'
    'General formatting; changing margins, default font style, setting 0 space before and after paragraphs
    Call Preview_Style_Change
    
    'This removes the extra lines between tables; newline first removes the newline character
        'and replaces it with a traditional carraige return;
        'RemoveEmptyPargraphs would benefit from some streamlining and general improvement
    Call replace_newline
    Call RemoveEmptyParagraphs
       
'    Dim ntables As Long
'    ntables = ActiveDocument.Tables.count
'    Debug.Print ntables
    
'    Dim i As Integer

    'Define types for the variables used in this function
    'previously we iterated through by numbering the tables and calling ActiveDocument.tables(i),
        'but we have no adjusted to looping through the tables in the document one by one
    Dim noRespondents As Boolean
    Dim isCodedComment As Boolean
    Dim responseRow As Integer
    Dim appendixRow As Integer
    Dim appendixType As String
    Dim typeRow As Integer
    Dim tbl As Table
    Dim exportTagInfo As Variant
    Dim exportTag As String
    Dim priorExportTag As String
    Dim secondAppendix As Boolean
    Dim responseRow_info As Variant
    
    'We will use priorExportTag to flag when we need to skip a bookmark or repeat appendix counter
        'in the case of a verbatim comment table that follows a coded comment table
    priorExportTag = ""
    
    'Define appendix label and save it for insertion elsewhere in the document
    
    'Insert the appendix field; this is complicated, so the best way found so far is to insert at the end
        'of the document, copy the field, then delete the first iteration
        'Once it's copied, we can paste in the correct locations as we iterate through the tables
        'AppendixFields_Full writes the appendix iteration field in full; see this function for
            'further information
        
    Selection.EndKey Unit:=wdStory
    Selection.TypeText (Chr(10))
    Call AppendixFields_Full
    ActiveDocument.ActiveWindow.View.ShowFieldCodes = False

    Selection.Collapse (wdCollapseStart)
    
    Selection.MoveRight Unit:=wdCharacter, Count:=1, Extend:=wdExtend
    Selection.Copy
    Selection.Delete
    
    'Iterate through each table of our appendix document
    'For each, identify the export tag (first row of tables generated by QualtricsTools),
    'Also identify locations of the table type, export tag, response count, and appendix letter
        'This will be a check we can run so that any manually inserted tables that don't fit
        'or tables that otherwise don't need to be formatted in the same way will be skipped
        
    For Each tbl In ActiveDocument.Tables
    
        'Identify the export tag
        exportTagInfo = identifyExportTag(tbl)
        exportTag = exportTagInfo(0)
        exportRow = exportTagInfo(1)
        Debug.Print exportTag
                
        'Identify whether this is a coded or verbatim table
        appendixTypeInfo = identifyAppendType(tbl)
        appendixType = appendixTypeInfo(0)
        typeRow = appendixTypeInfo(1)
        Debug.Print ("Type: " & appendixType & ", Row: " & typeRow)
        
        'Identify rows with the responses and/or message that no respondents answered the question
        responseRow_info = identifyResponseRow(tbl)
        responseRow = responseRow_info(0)
        noRespondents = responseRow_info(1)
        Debug.Print ("Response row: " & responseRow_info(0) & Chr(10) _
            & "No respondents: " & noRespondents)
        
        'Identify row that contains the appendix label/counter, replace appendix letter with field
        'For purposes of the Table of Contents, apply header styles to the appendix label and question text
            'Appendix label uses AppendixName_style, which is created in define_table_styles()
            'Question text uses AppendixQ_style, which is also created in define_table_styles()
            
        appendixRow = identifyAppendixRow(tbl)
        Debug.Print ("Appendix Row: " & appendixRow)
        If appendixRow > 0 Then
            tbl.Rows(appendixRow).Cells(1).Select
            Selection.TypeText ("Appendix ")
            Selection.Paste
            
            'Need to repeat the prior field code if we have a repeated export tag
            'This is the equivalent of pausing the appendix counter for a table
            'If this needs to be manually done, a similar find/replace search on the appropriate
                'field code will make this possible
            'For this part of the macro to work, the export tags for coded and verbatim comments much
                'match EXACTLY; adding "\c" after SEQ Append1 and SEQ Append2 (the two counters)
                ' will pause the counters and create the same appendix letter for the second table
            'If a table is a "repeat" (e.g. verbatim that follows a coded), then add \c after each
                'counter to repeat the same letter index
            'If it's a new export tag, apply the text style AppendixName_style
                'to the appendix name so it can be easily added to the table of contents
                'This AppendixName_style will also be used to find and bookmark appendix
                    'labels at a later point in the macro
            If exportTag = priorExportTag Then
                Selection.Expand (wdCell)
                ActiveDocument.ActiveWindow.View.ShowFieldCodes = True
                Selection.Find.Text = "SEQ Append1"
                Selection.Find.Replacement.Text = "SEQ Append1 \c"
                Selection.Find.Execute Replace:=wdReplaceAll
                Selection.Find.Text = "SEQ Append2"
                Selection.Find.Replacement.Text = "SEQ Append2 \c"
                Selection.Find.Execute Replace:=wdReplaceAll
                ActiveDocument.ActiveWindow.View.ShowFieldCodes = False
            Else:
                Selection.StartOf (wdLine)
                Selection.MoveRight Unit:=wdWord, Count:=2, Extend:=True
                Selection.Style = "AppendixName_style"
                
                'Apply a heading style for the question text that can be used in the table of contents
                'This assumes that the question text appears one row down
                    'from the appendix label (e.g. Appendix BC)
                tbl.Rows(appendixRow + 1).Range.Style = "AppendixQ_style"
            
            End If
            
        End If
        
        'Check tht the table has the expected structure; respondent count (or message for no respondents)
            'appears in row 6, the appendix name (letter index) appears in row 2, and
            'the type of comment table (verbatim or coded) is specified in row 4
        'If the table has the correct structure, apply the appendix table style
            'and correctly format each row (italics/bold where necessary)
        If (responseRow = 6 And appendixRow = 2 And typeRow = 4) Then
            Call apply_appendix_style(tbl, appendixType, _
                responseRow, typeRow)
                
            'Tables with multiple columns (coded comments or text entry with multiple components)
                'will appear with header info repeated in each column. Before merging, remove
                'the extraneous info so it won't appear in the final tables
            If tbl.Columns.Count > 1 Then
                Set duplicateHead = tbl.Columns(2).Cells(1).Range
                duplicateHead.End = tbl.Columns(tbl.Columns.Count).Cells(typeRow).Range.End
                duplicateHead.Select
                duplicateHead.Delete
            End If
            
            'Merge the header rows of the appendix; this merges appendix name, question text, comment type
            Call Appendix_Merge_Header(tbl)
            
            'Make the first rows up to the count of respondents a header that will repeat across pages
            Set rptHeadCells = ActiveDocument.Range(Start:=tbl.Cell(1, 1).Range.Start, _
                End:=tbl.Cell(3, ncol).Range.End)

            rptHeadCells.Rows.HeadingFormat = True
    
         
         'Need to add back side border to "responses" line
         'Also repeat bottom border so that it will exist if the table breaks
            'across multiple pages
            tbl.Rows(3).Borders(wdBorderLeft).LineStyle = wdLineStyleSingle
            tbl.Rows(3).Borders(wdBorderRight).LineStyle = wdLineStyleSingle
            tbl.Rows(3).Borders(wdBorderVertical).LineStyle = wdLineStyleSingle
            tbl.Rows(3).Borders(wdBorderBottom).LineStyle = wdLineStyleSingle
            tbl.Rows(3).Borders(wdBorderTop).LineStyle = wdLineStyleSingle

        End If
        
        'Use AppendixName_style (previously applied) to create bookmarks for appendices
            'with a "new" export tag
        Selection.Find.ClearFormatting
        With Selection.Find
            .Text = "Appendix"
            .Style = "AppendixName_style"
        End With
        
        tbl.Select
        Selection.Find.Execute
        If Selection.Find.Found = True Then
            Selection.StartOf (wdLine)
            Selection.MoveRight Unit:=wdWord, Count:=2, Extend:=wdExtend
            ActiveDocument.Bookmarks.Add Range:=Selection.Range, Name:=exportTag
        End If
        
        'define the current table's export tag as priorExportTag before iterating to the next table
        priorExportTag = exportTag
        
    Next tbl
        
ActiveDocument.Fields.Update
Application.ScreenUpdating = True

End Sub

Function identifyExportTag(tbl As Table) As Variant

    Selection.Find.ClearFormatting
    Dim exportTag As String
    Dim rowNum As Integer
        
    With Selection.Find
        .Text = "Export Tag: "
        .MatchCase = True
    End With
    
    tbl.Select
    Selection.Find.Execute
    
    If Selection.Find.Found = True Then
        rowNum = Selection.Information(wdStartOfRangeRowNumber)
        Selection.Collapse (wdCollapseEnd)
        Selection.Expand (wdCell)
        exportTag = Selection.Range.Text
        exportTag = Trim(Mid(exportTag, 13, Len(exportTag) - 14))
    Else:
        exportTag = ""
        rowNum = 0
    End If
    
    hashtag_pos = InStr(1, exportTag, Chr(35))
    If hashtag_pos > 1 Then
        exportTag = Replace(Expression:=exportTag, Find:=Chr(35), Replace:=Chr(95))
    End If
        
    
    identifyExportTag = Array(exportTag, rowNum)
    Debug.Print ("Export Tag: " & exportTag _
        & Chr(10) & "Export Row: " & rowNum)

End Function

Function identifyAppendType(tbl As Table)

'Identify whether this is a coded or verbatim comment table
'Delete extra header rows if this is relevent

    Selection.Find.ClearFormatting
    Dim appendType As String
    Dim typeRow As Integer
        
    Selection.Find.Text = "Coded Comments"
    
    tbl.Select
    Selection.Find.Execute
    
    If Selection.Find.Found = True Then
        typeRow = Selection.Information(wdStartOfRangeRowNumber)
        appendType = "coded"
'        Set duplicateHead = tbl.Columns(2).Cells(1).Range
'        duplicateHead.End = tbl.Columns(2).Cells(typeRow).Range.End
'        duplicateHead.Select
'        duplicateHead.Delete
    Else:
        Selection.Find.Text = "Verbatim"
        Selection.Find.Execute
        If Selection.Find.Found = True Then
            typeRow = Selection.Information(wdStartOfRangeRowNumber)
            appendType = "verbatim"
            
        Else:
            typeRow = 0
            appendType = ""
        End If
    End If
    
    identifyAppendType = Array(appendType, typeRow)
    Debug.Print ("Appendix Type: " & appendType _
        & Chr(10) & "Type Row: " & typeRow)

End Function

Function identifyResponseRow(tbl As Table)

    Dim responseRow As Integer
    Dim noRespondents As Boolean
    
    Selection.Find.ClearFormatting
    Selection.Find.Text = "Responses"
    Selection.Find.MatchCase = True
    tbl.Select
    Selection.Find.Execute
    If Selection.Find.Found = True Then
        responseRow = Selection.Information(wdStartOfRangeRowNumber)
        noRespondents = False
    Else
        Selection.Find.Text = "No respondents answered this question"
        tbl.Select
        Selection.Find.Execute
        If Selection.Find.Found = True Then
            responseRow = Selection.Information(wdStartOfRangeRowNumber)
            noRespondents = True
        Else
            responseRow = 0
            noRespondents = False
        
        End If
    
    End If
    
    identifyResponseRow = Array(responseRow, noRespondents)

End Function

Function identifyAppendixRow(tbl As Table) As Integer

    Selection.Find.ClearFormatting
    Selection.Find.Text = "Appendix"
    tbl.Select
    Selection.Find.Execute
    If Selection.Find.Found = True Then
        identifyAppendixRow = Selection.Information(wdStartOfRangeRowNumber)
    Else: indentifyAppendixRow = 0
    
    End If

End Function

Sub apply_appendix_style(tbl As Table, appendixType As String, responseRow As Integer, _
    typeRow As Integer)

    tbl.PreferredWidthType = wdPreferredWidthPercent
    tbl.PreferredWidth = 100
    
    'Sort tables alphabetically for plain text, by N then alphabetically for coded
    If tbl.Rows.Count > responseRow Then Call alphabetize_table(tbl, responseRow)
    
    tbl.Style = "appendix_table_style"
    
    'Align text vertically to be centered
       'Ideally this would be a part of the table style, but I couldn't find it....
    tbl.Range.Cells.VerticalAlignment = wdCellAlignVerticalCenter
    
    If appendixType = "coded" Then
        tbl.ApplyStyleLastRow = True
        tbl.ApplyStyleLastColumn = True
        With tbl.Columns(2)
           .PreferredWidthType = wdPreferredWidthPoints
           .PreferredWidth = InchesToPoints(0.55)
        End With
        
    Else
       tbl.ApplyStyleLastRow = False
       tbl.ApplyStyleLastColumn = False
    
    End If
    
    For J = 1 To responseRow
        If J = typeRow Then
           tbl.Rows(J).Range.Font.Italic = True
        ElseIf J < responseRow Then
            tbl.Rows(J).Range.Font.Bold = True
        ElseIf J = responseRow Then
            tbl.Rows(J).Range.Font.Bold = True
       End If
    '
        If J = responseRow And isCodedComment = True Then
           tbl.Rows(J).Cells(2).Range.ParagraphFormat.Alignment = wdAlignParagraphCenter
       End If

    Next J

End Sub

Sub finish_merged_summary_report()

    Call clearText_sidebyside_displaypanel
    Call Remove_Responses_Count
    Call remove_denominatorRow
    Call Remove_Export_Tag

End Sub
Sub Preview_Style_Change()

'First step in formatting preview
'Change global font and spacing for the document
    
    'Change paragraph spacing to have no space before or after
    'With HTML export, we need a few additional steps
    'Lauren discovered these in the senior survey; individual macros written
    ' and sent 11/17/16; incorporated 12/1/16
    
    'Specify Header 5 (block headers) to be Italic, Bold, size 14 font
    
    On Error Resume Next
    
    With ActiveDocument
    
        With .PageSetup
            .TopMargin = InchesToPoints(0.5)
            .BottomMargin = InchesToPoints(0.5)
            .LeftMargin = InchesToPoints(0.5)
            .RightMargin = InchesToPoints(0.5)
            
            .HeaderDistance = InchesToPoints(0.2)
            .FooterDistance = InchesToPoints(0.2)
            
        End With
        
        .Paragraphs.SpaceAfterAuto = False
        .Paragraphs.SpaceBeforeAuto = False
        .Paragraphs.SpaceBefore = 0
        .Paragraphs.SpaceAfter = 0
'        .Paragraphs.format.Alignment = wdAlignParagraphLeft
        
                
        'Change style of title (Heading 4), Block names (Header 5), and regular text (Compact)
                
        With .Styles("Heading 4")
            With .Font
                .Name = "Arial"
                .Size = 16
                .Color = wdColorAutomatic
            End With
            .ParagraphFormat.Alignment = wdAlignParagraphCenter
            .ParagraphFormat.SpaceAfter = 0
            .ParagraphFormat.SpaceBefore = 0
            
        End With
                
        With .Styles("Heading 5").Font
            .Name = "Arial"
            .Size = 14
            .Color = wdColorAutomatic
            .Italic = True
            .Bold = True
            .Underline = False
        End With
        
        With .Styles("Heading 5").ParagraphFormat
            .SpaceAfter = 0
            .SpaceBefore = 0
        End With
        
        With .Styles("Compact").Font
            .Name = "Arial"
            .Size = 10
            .Color = wdColorAutomatic
        End With
        
        With .Styles("Normal")
            With .Font
                .Name = "Arial"
                .Size = 10
                .Color = wdColorAutomatic
            End With
            .ParagraphFormat.SpaceAfter = 0
            .ParagraphFormat.SpaceBefore = 0
        End With
        
        With .Sections(1).Footers(wdHeaderFooterPrimary).Range
            .Paragraphs.SpaceBefore = 0
            .Paragraphs.SpaceAfter = 0
            .ParagraphFormat.LineSpacingRule = wdLineSpacingSingle
        End With
        
    'Find "Number of Respondents", select line, and change font to 10
    '.Wrap = wdFindContinue will find this regardless of where the cursor is in the doc
       
    End With
    
End Sub

Sub number_of_respondents()

    'This currently will format only overall reports
    'We will need to add an addition search for "Size of respondent group"
        'if we would like to add formatting for split reports
    
    With ActiveDocument
    
        With Selection.Find
            .Text = "Number of Respondents: "
            .Forward = True
            .Wrap = wdFindContinue
            .Format = False
            .MatchCase = True
        End With
        
        Selection.Find.Execute
        
        If Selection.Find.Found = True Then
            Selection.Expand wdLine
            
        Else
            Selection.Find.Text = "Size of Respondent Group: "
            Selection.Find.Execute
            If Selection.Find.Found = True Then
                Selection.Expand wdLine
                
            End If
            
        End If
        
        Selection.Font.Size = 10
        With Selection.ParagraphFormat
            .Alignment = wdAlignParagraphCenter
            .Borders(wdBorderLeft).LineStyle = wdLineStyleNone
            .Borders(wdBorderRight).LineStyle = wdLineStyleNone
            .Borders(wdBorderTop).LineStyle = wdLineStyleNone
            With .Borders(wdBorderBottom)
                .LineStyle = wdLineStyleDouble
                .LineWidth = wdLineWidth050pt
                .Color = wdColorAutomatic
            End With
            
            .Borders.DistanceFromBottom = 6
            .Borders.Shadow = False
        End With

        Selection.Collapse (wdCollapseEnd)
        Selection.Move Unit:=wdCharacter, Count:=-1
        Selection.TypeText (", Response Rate: XX.X%*,**")
        
    End With

End Sub

Sub insert_background_table_placeholder()

    Dim response_completeness As Table
    Dim demographics_table As Table
    Dim example_tables As String
    

'Insert placeholder tables for response completeness and demographics
 With ActiveDocument
 
        With Selection.Find
            .Text = "Number of Respondents: "
            .Forward = True
            .Wrap = wdFindContinue
            .Format = False
            .MatchCase = True
        End With
        
        Selection.Find.Execute
        
        If Selection.Find.Found = True Then
            Selection.Expand wdParagraph
            Selection.Collapse (wdCollapseEnd)
        
         Else
            With Selection.Find
                .Text = "Size of Respondent Group: "
                .Forward = True
                .Wrap = wdFindContinue
                .Format = False
                .MatchCase = True
            End With
            Selection.Find.Execute
            If Selection.Find.Found = True Then
                Selection.Expand wdLine
                Selection.Collapse (wdCollapseEnd)
            End If
        
        End If
        
    Selection.TypeParagraph
    Selection.ParagraphFormat.SpaceAfter = 0
    Selection.ParagraphFormat.SpaceBefore = 0
    
    .Hyperlinks.Add Anchor:=Selection.Range, Address:= _
        "Q:\Staff\_Reference Documentation\Surveys\QualtricsTools & Survey Reports\Demographics and Response Completeness Tables_Example.docx" _
        , SubAddress:="", ScreenTip:="", TextToDisplay:= _
        "See Example: Demographics and Response Completeness Tables"
    
    Set response_completeness = .Tables.Add(Selection.Range, 5, 1, _
        AutoFitBehavior:=wdAutoFitContents)
    response_completeness.Select
    Selection.Collapse (wdCollapseEnd)
    Selection.TypeParagraph
    Selection.Collapse (wdCollapseEnd)
    Set demographics_table = .Tables.Add(Selection.Range, 4, 3, _
        AutoFitBehavior:=wdAutoFitContents)
        
    demographics_table.Style = "info_table_style"
    response_completeness.Style = "info_table_style"
    
    demographics_table.ApplyStyleHeadingRows = True
    response_completeness.ApplyStyleHeadingRows = True
        
    With response_completeness.Cell(1, 1).Range
        .Text = "Response Completeness: FILL IN TABLE"
        .Font.Bold = True
        .Font.ColorIndex = wdAuto
    End With
    
    With demographics_table.Cell(1, 1).Range
        .Text = "Respondent Demographics: FILL IN TABLE"
        .Font.Bold = True
        .Font.ColorIndex = wdAuto
    End With
    
    Set demographics_mrg = demographics_table.Cell(1, 1).Range
        demographics_mrg.End = demographics_table.Cell(1, 3).Range.End
        demographics_mrg.Cells.Merge
    
    demographics_table.Range.ParagraphFormat.SpaceAfter = 0
    demographics_table.Range.ParagraphFormat.SpaceBefore = 0
    
    response_completeness.Range.ParagraphFormat.SpaceAfter = 0
    response_completeness.Range.ParagraphFormat.SpaceBefore = 0
    
    .Hyperlinks(1).Range.Bold = True
    .Hyperlinks(1).Range.Italic = True
    .Hyperlinks(1).Range.Underline = True
        
        
End With


End Sub


Sub Insert_header()

    Dim headerTable As Table

'Added January 2019 to change name to OIR and adjust spacing
With ActiveDocument

   
    'Move to the top of the document. Insert a new line, then return to the start and insert table.
    Selection.HomeKey Unit:=wdStory
    Selection.TypeParagraph
    Selection.HomeKey Unit:=wdStory
    
    .Tables.Add Range:=Selection.Range, NumRows:=1, NumColumns:= _
        2, AutoFitBehavior:=wdAutoFitWindow
    
    Set headerTable = .Tables(1)
        
    With headerTable
        .LeftPadding = 0
        .RightPadding = 0
        .TopPadding = 0
        .BottomPadding = 0
        .AutoFitBehavior (wdAutoFitContent)
    End With
    
    With headerTable.Cell(1, 2).Range
        .Text = "Office of Institutional Research"
        .Font.Size = 18
        .Font.Bold = True
        .ParagraphFormat.Alignment = wdAlignParagraphRight
        .Cells.VerticalAlignment = wdCellAlignVerticalBottom
    End With
    
    
    'Insert logo from its saved place on the Q drive
    headerTable.Cell(1, 1).Range.InlineShapes.AddPicture FileName:= _
        "Q:\Student Work\QualtricsTools\tufts_logo_black.png" _
        , LinkToFile:=False, SaveWithDocument:=True
    
    .InlineShapes(1).ConvertToShape
    .Tables(1).Cell(1, 1).Range.ParagraphFormat.Alignment = wdAlignParagraphLeft
    
    With .Shapes(1)
        .WrapFormat.Type = wdWrapInline
        .LockAspectRatio = msoTrue
        .Height = 35

    End With

   
    headerTable.AutoFitBehavior (wdAutoFitContent)
    headerTable.AutoFitBehavior (wdAutoFitWindow)
    
    headerTable.Columns.PreferredWidthType = wdPreferredWidthAuto
    headerTable.Columns.PreferredWidth = 0
    
End With
    
End Sub
    


Sub OLD_Insert_OIRE()

' Moves to the upper right hand corner and inserts, then formats, text
' This is inserted with its own formatting and can be used with any document;
    ' this is then adjusted when we change the format of Heading 4 in Preview_Style_Change
' Created by Adam Kaminski, summer 2016
' Updated ECM 5/25/17
    

With ActiveDocument

    oireName = "Office of Institutional" + Chr(10) + "Research & Evaluation" + Chr(10)
    
    Selection.HomeKey Unit:=wdStory
    Selection.TypeParagraph
    Selection.HomeKey Unit:=wdStory
    Selection.ParagraphFormat.Alignment = wdAlignParagraphRight
    With Selection.Font
        .Bold = True
        .Italic = False
        .Underline = False
        .Name = "Arial"
        .Size = 16
        .Color = wdColorAutomatic
    End With
    
    Selection.TypeText Text:=oireName
    Selection.Collapse

End With


End Sub


Sub OLD_Insert_logo()
'
' Inserts the Tufts logo in the upper left hand corner
' Created by Adam Kaminski, summer 2016
' Edits by ECM

    With ActiveDocument
        'Navigate to the top of the page
        Selection.HomeKey Unit:=wdStory
        'Pick an image via its path and insert it
        Selection.InlineShapes.AddPicture FileName:= _
        "Q:\Student Work\QualtricsTools\tufts_logo_black.png" _
        , LinkToFile:=False, SaveWithDocument:=True
        'Select the image
        ActiveDocument.InlineShapes(1).Select
        'format the image (lock aspect ratio and adjust height)
        With Selection.InlineShapes(1)
            .LockAspectRatio = msoTrue
            .Height = 35
        End With
        'Move it to the upper left hand corner (0, 0)
        Set nShp = Selection.InlineShapes(1).ConvertToShape
        With .Shapes(1)
            .Top = 0
            .Left = 0
        End With
        
        Selection.Collapse

    End With
    
End Sub

Sub Insert_footer()
'
' Inserts a footer
'As written, assumes there is only one section; if this changes, we need to uncomment these lines

'    Dim i As Long
   ' For i = 1 To ActiveDocument.Sections.Count
'    For Each Section In ActiveDocument.Sections
'        Dim myfooter As Word.Range

    'Clear the footer if anything exists
    
    ActiveDocument.Sections(1).Footers(wdHeaderFooterPrimary).Range.Select
    Selection.Delete
    
    'In the event that we are JUST using this function, we need to change the style and format
    
    With ActiveDocument.Sections(1).Footers(wdHeaderFooterPrimary).Range
            .Paragraphs.SpaceBefore = 0
            .Paragraphs.SpaceAfter = 0
            .ParagraphFormat.LineSpacingRule = wdLineSpacingSingle
            .Font.Name = "Arial"
            .Font.Size = 9
    End With

    Dim footerTable As Table
    With ActiveDocument
        Set insert_footerTable = .Tables.Add(.Sections(1).Footers(wdHeaderFooterPrimary).Range, 2, 3)
                
        Dim oireFooter As String
        Dim analystFooter As String
        Dim internalUse As String
        Dim reportName As String
        Dim analystName As String
        Dim dateText As String
        
        'Create defeault settings for all user entry
        
        reportName = InputBox("Enter Name of survey, Year, Special Population" & Chr(10) _
            & "Default: NAME OF SURVEY AND YEAR")
        specialPopulation = InputBox("Enter Special Population (if applicable)" _
            & Chr(10) & "Default:")
        analystName = InputBox("Analyst Name" & Chr(10) & "Default: ANALYST NAME")
        dateText = InputBox("Enter Date" & Chr(10) & "Default: INSERT DATE")
        
        If reportName = "" Then _
            reportName = "NAME OF SURVEY AND YEAR"
        If specialPopulation = "" Then specialPopulation = ""
        If analystName = "" Then analystName = "ANALYST NAME"
        If dateText = "" Then dateText = "INSERT DATE"
        
        Debug.Print ("ReportName: " & reportName)
        Debug.Print ("Special Population: " & specialPopulation)
        Debug.Print ("analystName: " & analystName)
        Debug.Print ("dateText: " & dateText)
        
        oireFooter = "Office of Institutional Research" + _
            Chr(10) + reportName + Chr(10) + specialPopulation
        analystFooter = "Prepared by: " & analystName + Chr(10) + _
            dateText
            
        internalUse = "**This report is intended for internal use only**"
            
        Set footerTable = .Sections(1).Footers(wdHeaderFooterPrimary).Range.Tables(1)
                        
        With footerTable
                        
            .TopPadding = InchesToPoints(0.08)
            .BottomPadding = InchesToPoints(0)
            .LeftPadding = InchesToPoints(0)
            .RightPadding = InchesToPoints(0)
            
        
            With .Cell(1, 1).Range
                .Text = oireFooter
                .ParagraphFormat.Alignment = wdAlignParagraphLeft
            End With
            
            .Cell(1, 2).Range.Select
            Selection.Collapse
            With Selection
                .Fields.Add Range:=Selection.Range, Type:=wdFieldEmpty, Text:= _
                "PAGE ", preserveFormatting:=True
                .TypeText Text:=" of "
                .Fields.Add Range:=Selection.Range, Type:=wdFieldEmpty, Text:= _
                "NUMPAGES ", preserveFormatting:=True
            End With
            
            .Cell(1, 2).Range.ParagraphFormat.Alignment = wdAlignParagraphCenter
            
            With .Cell(1, 3).Range
                .Text = analystFooter
                .ParagraphFormat.Alignment = wdAlignParagraphRight
            End With
            
            .Cell(2, 1).Range.Text = internalUse
            
            'Remove borders from the footer table
            
            .Borders(wdBorderTop).LineStyle = wdLineStyleNone
            .Borders(wdBorderBottom).LineStyle = wdLineStyleNone
            .Borders(wdBorderLeft).LineStyle = wdLineStyleNone
            .Borders(wdBorderRight).LineStyle = wdLineStyleNone
            .Borders(wdBorderHorizontal).LineStyle = wdLineStyleNone
            .Borders(wdBorderVertical).LineStyle = wdLineStyleNone
                
        End With
        
        'Merge cells of second row and format text to be centered and italicized
        
        Dim mrgrng As Range

        Set mrgrng = footerTable.Cell(2, 1).Range
        mrgrng.End = footerTable.Cell(2, 3).Range.End
        mrgrng.Cells.Merge
        
        footerTable.Rows(2).Select
        Selection.ParagraphFormat.Alignment = wdAlignParagraphCenter
        Selection.Font.Italic = True
    

    If ActiveWindow.View.SplitSpecial <> wdPaneNone Then
        ActiveWindow.Panes(2).Close
    End If
    If ActiveWindow.ActivePane.View.Type = wdNormalView Or ActiveWindow. _
        ActivePane.View.Type = wdOutlineView Then
        ActiveWindow.ActivePane.View.Type = wdPrintView
    End If

    
    End With
    
    With ActiveDocument.Sections(1).Footers(wdHeaderFooterPrimary).Range.Tables(1)
        .PreferredWidthType = wdPreferredWidthPercent
        .PreferredWidth = 100
        
        .Cell(1, 2).PreferredWidthType = wdPreferredWidthPercent
        .Cell(1, 2).PreferredWidth = 12
        
        .Cell(1, 1).PreferredWidthType = wdPreferredWidthPercent
        .Cell(1, 1).PreferredWidth = 44
        
        .Cell(1, 3).PreferredWidthType = wdPreferredWidthPercent
        .Cell(1, 3).PreferredWidth = 44
        
        .Rows.LeftIndent = InchesToPoints(0)
    End With

    
End Sub


Sub format_preview_tables(i As Integer, ncol As Integer)
    Dim exportTag As String

    ActiveDocument.Tables(i).Select
    Selection.ClearFormatting
'    Selection
    Selection.Collapse

    If ncol = 1 Then
        Call format_question_style(i)
    ElseIf ncol = 3 Then
        Call format_mc_singleQ(i)
    ElseIf ncol > 3 Then
        Call format_matrix_table(i)
    
    End If
    
    If i > 1 And ncol >= 3 Then
        exportTag = ActiveDocument.Tables(i - 1).Cell(1, 1).Range.Text
        exportTag = Trim(Left(exportTag, Len(exportTag) - 2))
        Debug.Print "Processed results: " + exportTag + " (" + Str(i) + ")"
    End If

End Sub

Sub define_mc_table_style()

    On Error Resume Next
    ActiveDocument.Styles("mc_table_style").Delete
    
    ActiveDocument.Styles.Add Name:="mc_table_style", Type:=wdStyleTypeTable
    
    With ActiveDocument.Styles("mc_table_style")
    
        With .ParagraphFormat
            .LeftIndent = InchesToPoints(0.08)
            .RightIndent = InchesToPoints(0.08)
            .Alignment = wdAlignParagraphRight
            .SpaceAfter = 0
            .SpaceBefore = 0
            .LineSpacingRule = wdLineSpaceSingle
            .KeepWithNext = True
        End With
        
        'We can specify formatting for the first and last column
        'Make default the foramtting for % since this will be unspecified
        
        .Font.Bold = True
        .Font.Name = "Arial"
        .Font.Size = 10
        
        With .Table

'            .AllowPageBreaks = False
            .AllowBreakAcrossPage = False
            
            .RightPadding = 0
            .LeftPadding = 0
            .TopPadding = InchesToPoints(0.01)
            .BottomPadding = InchesToPoints(0.01)
            
            .Borders.InsideLineStyle = wdLineStyleNone
            .Borders.OutsideLineStyle = wdLineStyleNone

            With .Condition(wdFirstColumn)
                
                With .Font
                    .Bold = True
                    .Italic = True
                    .ColorIndex = wdGray50
                End With
                
                .ParagraphFormat.Alignment = wdAlignParagraphRight
            
            End With
            
            With .Condition(wdLastColumn)
                
                .Font.Bold = False
                .ParagraphFormat.Alignment = wdAlignParagraphLeft
            
            End With
        
        End With
            

               
        'Format first column: bold, italic, gray, right aligned
        
    End With
        
    
End Sub

Sub format_mc_singleQ(i As Integer)
    
    With ActiveDocument
    
        .Tables(i).Style = "mc_table_style"

        .Tables(i).ApplyStyleFirstColumn = True
        .Tables(i).ApplyStyleLastColumn = True
    
    'Check to make sure that the first row has labels for "N" and "Percent"
    'If yes, delete the first row
        
        cellText1 = .Tables(i).Cell(1, 1).Range.Text
        cellText2 = .Tables(i).Cell(1, 2).Range.Text
'        Debug.Print "Cell_1: " & cellText1
'        Debug.Print "Cell_2: " & cellText2
        
        If cellText1 Like "N*" And cellText2 Like "Percent*" Then
            .Tables(i).Rows(1).Delete
        End If
        
        .Tables(i).AutoFitBehavior (wdAutoFitContent)
        
    
    End With
    
End Sub


Sub define_question_style()

    On Error Resume Next
    ActiveDocument.Styles("question_style").Delete
    
    ActiveDocument.Styles.Add Name:="question_style", Type:=wdStyleTypeTable
    
    With ActiveDocument.Styles("question_style")
        With .Table

'            .AllowPageBreaks = False
            .AllowBreakAcrossPage = False
            
'            .Spacing = InchesToPoints(0)
            .TopPadding = InchesToPoints(0)
            .BottomPadding = InchesToPoints(0)
            .LeftPadding = InchesToPoints(0)
            .RightPadding = InchesToPoints(0)
            
        End With
        
        With .ParagraphFormat
            .KeepWithNext = True
            .LineSpacingRule = wdLineSpaceSingle
            .SpaceAfter = 0
            .SpaceBefore = 0
        End With
        
    End With
        
    
End Sub

Sub define_info_table_style()

    On Error Resume Next
    ActiveDocument.Styles("info_table_style").Delete
    
    ActiveDocument.Styles.Add Name:="info_table_style", Type:=wdStyleTypeTable
    
    With ActiveDocument.Styles("info_table_style")
        With .Table

            .AllowBreakAcrossPage = False
            .TopPadding = InchesToPoints(0)
            .BottomPadding = InchesToPoints(0)
            .LeftPadding = InchesToPoints(0)
            .RightPadding = InchesToPoints(0)
            
                    With .Borders(wdBorderLeft)
            .LineStyle = wdLineStyleSingle
            .LineWidth = wdLineWidth150pt
            .Color = wdColorAutomatic
        End With
        
        With .Borders(wdBorderRight)
            .LineStyle = wdLineStyleSingle
            .LineWidth = wdLineWidth150pt
            .Color = wdColorAutomatic
        End With
        
        With .Borders(wdBorderTop)
            .LineStyle = wdLineStyleSingle
            .LineWidth = wdLineWidth150pt
            .Color = wdColorAutomatic
        End With
        
        With .Borders(wdBorderBottom)
            .LineStyle = wdLineStyleSingle
            .LineWidth = wdLineWidth150pt
            .Color = wdColorAutomatic
        End With
        
        With .Shading
            .Texture = wdTextureNone
            .ForegroundPatternColor = wdColorAutomatic
            .BackgroundPatternColor = wdColorGray10
        End With
   
        End With
        
        
        
        With .ParagraphFormat
            .KeepWithNext = True
            .LineSpacingRule = wdLineSpaceSingle
            .SpaceAfter = 0
            .SpaceBefore = 0
            .Alignment = wdAlignParagraphLeft
            .LeftIndent = InchesToPoints(0.08)
            .RightIndent = InchesToPoints(0.08)
        End With
        
        .Font.Name = "Arial"
        .Font.Size = 10
        .Font.ColorIndex = wdAuto
        .Font.Bold = False
        
        .Table.Condition(wdFirstRow).Font.Bold = True
        
    End With
        
    
End Sub

Sub format_question_style(i As Integer)

'Format question text and information
    
    Dim nrow As Integer
        
    With ActiveDocument
        nrow = .Tables(i).Rows.Count

        .Tables(i).Style = "question_style"
        
        'format the question info, identified by single column
            ' Set table width to full page
        .Tables(i).PreferredWidthType = wdPreferredWidthPercent
        .Tables(i).PreferredWidth = 100
        
        If .Tables(i).Rows.Count > 1 Then
        
        'Bold question text
        .Tables(i).Rows(2).Select
        With Selection
            .Font.Bold = True
        End With
        End If
        'Make display logic red to highlight
        If nrow >= 3 Then
            Dim r As Long
            For r = 3 To nrow
                .Tables(i).Rows(r).Select
                With Selection.Font
                    .Bold = True
                    .Color = wdColorDarkRed
                End With
                Selection.Collapse
            Next
        End If
        
    ' Stop table from breaking across page

End With
    
End Sub


Sub Define_Matrix_Style()

    'If the style exists from a previous run, delete and redefine
    
    On Error Resume Next
    ActiveDocument.Styles("Matrix_table_style").Delete
    
    ActiveDocument.Styles.Add Name:="Matrix_table_style", Type:=wdStyleTypeTable
    
    With ActiveDocument.Styles("Matrix_table_style")
            
        With .Font
            .Name = "Arial"
            .Size = 10
            .Bold = True
            .Italic = False
            .ColorIndex = wdAuto
        End With
        
        With .ParagraphFormat
            .LineUnitAfter = 0
            .LineUnitBefore = 0
            .LineSpacingRule = wdLineSpaceSingle
            .Alignment = wdAlignParagraphCenter
            .KeepWithNext = True
        End With
                
        With .Table
            .RowStripe = 1
            .ColumnStripe = 0
'            .AllowPageBreaks = False
            .AllowBreakAcrossPage = False
            
            .LeftPadding = 0
            .RightPadding = 0
            .TopPadding = 0.01
            .BottomPadding = 0.01
'            .Spacing = InchesToPoints(0)
            
            With .Condition(wdFirstColumn)
                .Font.Bold = False
                .ParagraphFormat.Alignment = wdAlignParagraphLeft
                .ParagraphFormat.LeftIndent = InchesToPoints(0.08)
                .ParagraphFormat.RightIndent = InchesToPoints(0.08)

            End With
            
            With .Condition(wdFirstRow)
                With .Borders(wdBorderTop)
                    .LineStyle = wdLineStyleSingle
                    .LineWidth = wdLineWidth050pt
                    .Color = wdColorAutomatic
                End With
                
                With .Borders(wdBorderBottom)
                    .LineStyle = wdLineStyleSingle
                    .LineWidth = wdLineWidth050pt
                    .Color = wdColorAutomatic
                End With
                
                With .Borders(wdBorderRight)
                    .LineStyle = wdLineStyleSingle
                    .LineWidth = wdLineWidth050pt
                    .Color = wdColorAutomatic
                End With
                
                With .Borders(wdBorderVertical)
                    .LineStyle = wdLineStyleSingle
                    .LineWidth = wdLineWidth050pt
                    .Color = wdColorAutomatic
                End With
                
            End With
                        
            With .Condition(wdEvenRowBanding)
                With .Shading
                    .Texture = wdTextureNone
                    .ForegroundPatternColor = wdColorAutomatic
                    .BackgroundPatternColor = RGB(220, 230, 250)
                End With
            
                With .Borders(wdBorderVertical)
                    .LineStyle = wdLineStyleSingle
                    .LineWidth = wdLineWidth050pt
                    .Color = wdColorAutomatic
                End With
    
                With .Borders(wdBorderLeft)
                    .LineStyle = wdLineStyleSingle
                    .LineWidth = wdLineWidth050pt
                    .Color = wdColorAutomatic
                End With
            
                With .Borders(wdBorderRight)
                    .LineStyle = wdLineStyleSingle
                    .LineWidth = wdLineWidth050pt
                    .Color = wdColorAutomatic
                End With
            
            End With
          
            With .Borders(wdBorderVertical)
                .LineStyle = wdLineStyleSingle
                .LineWidth = wdLineWidth050pt
                .Color = wdColorAutomatic
            End With
    
            With .Borders(wdBorderLeft)
                .LineStyle = wdLineStyleSingle
                .LineWidth = wdLineWidth050pt
                .Color = wdColorAutomatic
            End With
            
            With .Borders(wdBorderRight)
                .LineStyle = wdLineStyleSingle
                .LineWidth = wdLineWidth050pt
                .Color = wdColorAutomatic
            End With
            
            With .Borders(wdBorderBottom)
                .LineStyle = wdLineStyleSingle
                .LineWidth = wdLineWidth050pt
                .Color = wdColorAutomatic
            End With
    
            With .Borders(wdBorderTop)
                .LineStyle = wdLineStyleSingle
                .LineWidth = wdLineWidth050pt
                .Color = wdColorAutomatic
            End With
            
        End With
        
    End With

End Sub

Sub format_matrix_table(i As Integer)

    Dim isNATable As Boolean
    isNATable = False
    
    With ActiveDocument
    
    'For reproducability - if we have already formatted the NA style type, delete the first row and start again
    
    If .Tables(i).Rows(1).Cells.Count <> .Tables(i).Rows(.Tables(i).Rows.Count).Cells.Count _
        And InStr(1, .Tables(i).Cell(1, 2).Range.Text, "Of those NOT selecting") Then
        .Tables(i).Rows(1).Delete
    End If

        With .Tables(i)
            .Style = "Matrix_table_style"
            .ApplyStyleFirstColumn = True
            .ApplyStyleHeadingRows = True
        End With
        
        .Tables(i).Select
        Selection.Cells.VerticalAlignment = wdCellAlignVerticalCenter
        Selection.ParagraphFormat.LeftIndent = InchesToPoints(0.08)
        Selection.ParagraphFormat.RightIndent = InchesToPoints(0.08)
        
        Selection.Collapse
                    
        .Tables(i).Cell(1, 1).Borders(wdBorderLeft).LineStyle = wdLineStyleNone
        .Tables(i).Cell(1, 1).Borders(wdBorderTop).LineStyle = wdLineStyleNone
        
        .Tables(i).PreferredWidthType = wdPreferredWidthPercent
        .Tables(i).PreferredWidth = 100
        
        .Tables(i).Columns(1).PreferredWidth = InchesToPoints(3.5)
                        
        'Format N columns

        Dim nColumns As Long
        nColumns = .Tables(i).Columns.Count

        For J = 2 To nColumns
    
            .Tables(i).Columns(J).Select
            
            Selection.Find.ClearFormatting
            
            With Selection.Find
                .Text = "N"
                .MatchWholeWord = True
            End With
            Selection.Find.Execute
            
            If Selection.Find.Found = True Then
                .Tables(i).Columns(J).PreferredWidth = InchesToPoints(0.47)
                                 
                .Tables(i).Columns(J).Select
                With Selection
                     .Font.Italic = True
                     .Font.ColorIndex = wdGray50
                 End With
                 
                 With Selection.Find
                    .Text = "total_N"
                    .Replacement.Text = "Total N"
                End With

                Selection.Find.Execute Replace:=wdReplaceOne
                                
                Selection.Collapse
      
            End If
             
        Next
        
'        Selection.find.ClearFormatting
'        Selection.find.Text = "Total N"
'        .Tables(i).Select
'        Selection.find.Execute
'        If Selection.find.Found = True Then isNATable = True
'
'        If isNATable Then Call format_NA_table(.Tables(i))
        
        Selection.Collapse

    End With
    

End Sub


Sub format_NA_table(tbl As Table)

'Adapted from Rebecca's macro
'Adjusted by Emma to be called in sequence with the macros rather than separate

    Dim rowHeadings As row
    Dim cellHeading As Cell
    Dim iHeadingsRowIndex As Integer
    Dim iNAColumnIndex As Integer
    Dim iNAColumnIndexMin As Integer
    Dim iLast As Integer
    Dim NAText As String
    Dim validRange As Range

    
    iHeadingsRowIndex = 1                  'Set heading row to 1st row.  Best way to determine this for now.
    iNAColumnIndexMin = 4
    
    isTableTypeNA = False
    Set rowHeadings = tbl.Rows(iHeadingsRowIndex)
    
    For Each cellHeading In rowHeadings.Cells
        If InStr(1, cellHeading.Range.Text, "Total N") Then ' And cellHeading.ColumnIndex > iNAColumnIndexMin Then
            iNAColumnIndex = cellHeading.ColumnIndex
            Debug.Print ("Column index: " & iNAColumnIndex)
            Exit For
        End If
    Next cellHeading
    

    NAText = tbl.Cell(1, tbl.Columns.Count).Range.Text
    NAText = Trim(Left(NAText, Len(NAText) - 2))
    Debug.Print NAText

    tbl.Rows(1).Select
    Selection.InsertRowsAbove 1
    Selection.Collapse
    tbl.Cell(1, 1).Borders(wdBorderBottom).LineStyle = wdLineStyleNone
    
'    With tbl.Cell(Row:=1, Column:=2).Range
'        .Text = "Of those NOT selecting " & Chr(34) & NAText & Chr(34)
'        .Font.Bold = True
'    End With
'
'    With tbl.Cell(Row:=1, Column:=iNAColumnIndex).Range
'        .Text = "Of all respondents"
'        .Font.Bold = True
'    End With
    
    Set validRange = tbl.Cell(1, 2).Range
    validRange.SetRange Start:=validRange.Start, _
    End:=tbl.Cell(tbl.Rows.Count, iNAColumnIndex - 1).Range.End

    validRange.Borders(wdBorderBottom).LineWidth = wdLineWidth150pt
    validRange.Borders(wdBorderTop).LineWidth = wdLineWidth150pt
    validRange.Borders(wdBorderLeft).LineWidth = wdLineWidth150pt
    validRange.Borders(wdBorderRight).LineWidth = wdLineWidth150pt
    
    tbl.Rows(2).Range.Borders(wdBorderBottom).LineStyle = wdLineStyleSingle
    tbl.Rows(2).Range.Borders(wdBorderBottom).LineWidth = wdLineWidth050pt
                
    If iNAColumnIndex >= 4 Then
        tbl.Cell(row:=1, Column:=2).Merge MergeTo:=tbl.Cell(row:=1, Column:=iNAColumnIndex - 1)
    End If
    iLast = tbl.Rows(1).Cells.Count
    tbl.Cell(row:=1, Column:=3).Merge MergeTo:=tbl.Cell(row:=1, Column:=iLast)
    
    With tbl.Cell(row:=1, Column:=2).Range
        .Text = "Of those NOT selecting " & Chr(34) & NAText & Chr(34)
        .Font.Bold = True
    End With

    With tbl.Cell(row:=1, Column:=3).Range
        .Text = "Of all respondents"
        .Font.Bold = True
    End With



    
End Sub



Sub Replace_zeros(i As Integer)
'
' Searches for "0.0%" and replaces it with "--"
' Created by Adam Kaminsky
' Edited by EM to make sure the program didn't stop part of the way through

    Application.DisplayAlerts = False
    
    
    ActiveDocument.Tables(i).Range.Select
    Selection.Find.ClearFormatting
    Selection.Find.Replacement.ClearFormatting
    With Selection.Find
        .Text = "0.0%"
        .Replacement.Text = "--"
        .Forward = True
        .Wrap = wdFindStop
        .Format = False
        .MatchCase = True
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
        .MatchPrefix = True
    End With
    
    Selection.Find.Execute Replace:=wdReplaceAll

'    Next

    
End Sub

Sub Replace_NaN(i As Integer)
'
' Searches for "NaN%" resulting from denominator 0 and replaces it with "--"
' Adapted from "Replace 0" code
' Created by Adam Kaminsky
' Edited by EM to make sure the program didn't stop part of the way through

    Application.DisplayAlerts = False
    
  
    ActiveDocument.Tables(i).Range.Select
    Selection.Find.ClearFormatting
    Selection.Find.Replacement.ClearFormatting
    With Selection.Find
        .Text = "NaN%"
        .Replacement.Text = "--"
        .Forward = True
        .Wrap = wdFindStop
        .Format = False
        .MatchCase = True
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
        .MatchPrefix = False
    End With
    
    Selection.Find.Execute Replace:=wdReplaceAll
    

    
End Sub


Sub remove_denominatorRow()

    Dim i As Integer
    Dim ntables As Integer
    
    With ActiveDocument
    
    ntables = .Tables.Count

    Selection.Find.ClearFormatting
    Selection.Find.Replacement.ClearFormatting
    
    With Selection.Find
            .Text = "Denominator Used:"
            .Replacement.Text = ""
            .Forward = True
            .Wrap = wdFindStop
            .Format = False
            .MatchCase = True
            .MatchWholeWord = False
            .MatchWildcards = False
            .MatchSoundsLike = False
            .MatchAllWordForms = False
    End With
    
    For i = 1 To ntables
        If .Tables(i).Columns.Count = 1 Then
            .Tables(i).Select

            If Selection.Find.Execute Then Selection.Rows.Delete
        End If
    Next
    
    End With

End Sub

Sub remove_questionInfo_row()
'
' Removes question data export tags from the question info tables in the survey preview
' Called as part of the final cleaning up macro
'
    With ActiveDocument
    
    Dim ntables As Long
    ntables = .Tables.Count
    
    For i = 1 To ntables
        ncol = .Tables(i).Columns.Count
        
'        Delete first row of the question info (data export tag)
'        This will only appear in question info in the preview; all others have 3+ columns
'        This can be used for appendices to remove first row from coded and full text comments
        
        If ncol <= 2 Then
            'delete data export tag
            .Tables(i).Rows(1).Select
            Selection.Rows.Delete
                    
        End If
    Next
            
    End With
    
End Sub

Sub define_appendix_table_style()

    'If the style exists from a previous run, delete and redefine
    On Error Resume Next
    ActiveDocument.Styles("appendix_table_style").Delete

    ActiveDocument.Styles.Add Name:="appendix_table_style", Type:=wdStyleTypeTable

    With ActiveDocument.Styles("appendix_table_style")
        With .Font
            .Name = "Arial"
            .Size = 10
            .Color = wdColorAutomatic
        End With
        
        With .ParagraphFormat
            .Alignment = wdAlignParagraphLeft
            .RightIndent = InchesToPoints(0.1)
            .LeftIndent = InchesToPoints(0.1)
            .KeepWithNext = True
        End With
        
        With .Table
            
             ' Not sure what these do; want to keep rows from breaking,
             'and possibly keep tables together(?)
            .AllowPageBreaks = False
            .AllowBreakAcrossPage = False
        
            .RowStripe = 1
            .ColumnStripe = 0
            
            .LeftPadding = InchesToPoints(0)
            .RightPadding = InchesToPoints(0)
    
            With .Condition(wdOddRowBanding)
                With .Shading
                    .Texture = wdTextureNone
                    .ForegroundPatternColor = wdColorAutomatic
                    .BackgroundPatternColor = RGB(220, 230, 250)
                End With
                                
                With .Borders(wdBorderLeft)
                    .LineStyle = wdLineStyleSingle
                    .LineWidth = wdLineWidth050pt
                    .Color = wdColorAutomatic
                End With
                
                With .Borders(wdBorderRight)
                    .LineStyle = wdLineStyleSingle
                    .LineWidth = wdLineWidth050pt
                    .Color = wdColorAutomatic
                End With
                
                With .Borders(wdBorderVertical)
                    .LineStyle = wdLineStyleSingle
                    .LineWidth = wdLineWidth050pt
                    .Color = wdColorAutomatic
                End With
            
            End With

            'Adjust borders
            With .Borders(wdBorderLeft)
                .LineStyle = wdLineStyleSingle
                .LineWidth = wdLineWidth050pt
                .Color = wdColorAutomatic
            End With
            
            With .Borders(wdBorderRight)
                .LineStyle = wdLineStyleSingle
                .LineWidth = wdLineWidth050pt
                .Color = wdColorAutomatic
            End With
            
            With .Borders(wdBorderBottom)
                .LineStyle = wdLineStyleSingle
                .LineWidth = wdLineWidth050pt
                .Color = wdColorAutomatic
            End With
            
            'Vertical borders should be included for coded comment appendices
            With .Borders(wdBorderVertical)
                .LineStyle = wdLineStyleSingle
                .LineWidth = wdLineWidth050pt
                .Color = wdColorAutomatic
            End With
            
            'For coded comments, need to change style of the last row to adjust
            With .Condition(wdLastRow)
                .Font.Bold = True
                .Borders(wdBorderTop).LineStyle = wdLineStyleSingle
                .Borders(wdBorderTop).LineWidth = wdLineWidth050pt
            End With
            
            With .Condition(wdLastColumn)
                .ParagraphFormat.Alignment = wdAlignParagraphCenter
            End With
                   
          'Format Header to have bottom border
            With .Condition(wdFirstRow).Borders(wdBorderBottom)
                .LineStyle = wdLineStyleSingle
                .LineWidth = wdLineWidth050pt
                .Color = wdColorAutomatic
            End With
            
        End With

    End With

End Sub

Sub alphabetize_table(tbl As Table, responseRow As Integer)
Attribute alphabetize_table.VB_ProcData.VB_Invoke_Func = "Normal.NewMacros.alphabetize_table"
'
' alphabetize_table Macro
'From recorded macro; has not yet been tested or incorporated into macro
'

'Sort verbatim text appendices alphabetically
    nrow = tbl.Rows.Count
    ncol = tbl.Columns.Count
    
    If (nrow > responseRow) Then
        With tbl
            Set responseRows = .Rows(responseRow + 1).Range
            If ncol = 1 Then
                responseRows.End = .Rows(nrow).Range.End
            ElseIf ncol = 2 Then
                responseRows.End = .Rows(nrow - 1).Range.End
            End If
        End With
        
        responseRows.Select
        If (ncol = 1) Then
            Selection.Sort ExcludeHeader:=False, _
                FieldNumber:="Column 1", _
                SortFieldType:=wdSortFieldAlphanumeric, _
                SortOrder:=wdSortOrderAscending, _
                LanguageID:=wdEnglishUS, subFieldNumber:="Paragraphs"
        ElseIf (ncol = 2) Then
            Selection.Sort ExcludeHeader:=False, _
                FieldNumber:="Column 2", _
                SortFieldType:=wdSortFieldNumeric, _
                SortOrder:=wdSortOrderDescending, _
                FieldNumber2:="Column 1", _
                SortFieldType2:=wdSortFieldAlphanumeric, _
                SortOrder2:=wdSortOrderAscending, _
                LanguageID:=wdEnglishUS, subFieldNumber:="Paragraphs"
        End If
    
    End If

End Sub

Sub Appendix_Merge_Header(tbl As Table)
Attribute Appendix_Merge_Header.VB_ProcData.VB_Invoke_Func = "Normal.NewMacros.Appendix_Merge_Header"

'    If appendixType = "coded" Then tbl.Rows(1).Cells.Merge
    
    Set mergeCells = tbl.Rows(2).Range
    mergeCells.End = tbl.Rows(5).Range.End
    mergeCells.Select
    
    With Selection
        .Cells.Merge
        .ParagraphFormat.Alignment = wdAlignParagraphCenter
        .Borders(wdBorderLeft).LineStyle = wdLineStyleNone
        .Borders(wdBorderRight).LineStyle = wdLineStyleNone
        .Borders(wdBorderTop).LineStyle = wdLineStyleNone
        .Borders(wdBorderBottom).LineStyle = wdLineStyleNone
        .ParagraphFormat.SpaceBefore = 0
        .ParagraphFormat.SpaceAfter = 5
    End With

End Sub

Sub preview_remove_block_titles()

'This macro will remove the section indicators (block titles from .qsf)
'They are currently input into the document as heading 5
'We want to delete the row of text with heading 5 and the next row

With Selection.Find
    .ClearFormatting
    .Style = ActiveDocument.Styles("Heading 5")
    .Replacement.ClearFormatting
    .Text = ""
    .Replacement.Text = ""
    .Forward = True
    .Wrap = wdFindStop
    .Format = True
    .MatchCase = True
    .MatchWholeWord = False
    .MatchWildcards = False
    .MatchSoundsLike = False
    .MatchAllWordForms = False
End With


npar = ActiveDocument.Paragraphs.Count
Debug.Print (npar)
For i = 1 To npar
    Debug.Print "Paragraph" + Str(i)
    ActiveDocument.Paragraphs(i).Range.Select
    Selection.HomeKey Unit:=wdLine
    Selection.Find.Execute

    If Selection.Find.Found = True Then
        Selection.Find.Parent.MoveDown Unit:=wdLine, Count:=2, Extend:=wdExtend
        Selection.Find.Parent.Delete
    Else: Exit For
    End If

Next
        
End Sub

Sub remove_blockHeaders()

    With ActiveDocument
    
    Dim loopCount As Integer
    loopCount = 1
    
    
    Selection.Find.ClearFormatting
    Selection.Find.Style = .Styles("Heading 5")
    With Selection.Find
     .Text = ""
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindAsk
        .Format = True
        .MatchCase = False
        .MatchWholeWord = False
        .MatchByte = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    Selection.HomeKey Unit:=wdStory
    Selection.Find.Execute
    
    Do While Selection.Find.Found = True And loopCount < 1000
    
        Debug.Print iCount
        Selection.Expand wdParagraph
        Selection.Delete
        Selection.EndOf
        Selection.Delete
        Selection.HomeKey Unit:=wdStory
        Selection.Find.Execute
    Loop
    
    
    
    End With

'    Call RemoveEmptyParagraphs

End Sub


Sub replace_newline()

    Dim wrdDoc As Document
    Set wrdDoc = ActiveDocument
    wrdDoc.Content.Select

'Replace new line character (^l) with carraige return (^p)
    Selection.Find.ClearFormatting
    Selection.Find.Replacement.ClearFormatting

    With Selection.Find
        'oryginal
        .Text = "^l"
        .Replacement.Text = "^p"
        .Forward = True

    End With

GoHere:
    Selection.Find.Execute Replace:=wdReplaceAll

    If Selection.Find.Execute = True Then
        GoTo GoHere
    End If

End Sub

Sub format_See_Appendix(i)

    With ActiveDocument
    
    Selection.Find.ClearFormatting
    Selection.Find.Replacement.ClearFormatting
        
    With Selection.Find
        .Text = "See Appendix."
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindStop
        .Format = False
        .MatchCase = True
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    
    .Tables(i).Select
    
    If Selection.Find.Execute Then
        Selection.ParagraphFormat.LeftIndent = InchesToPoints(0.5)
        Selection.ParagraphFormat.SpaceBefore = 10
    End If
    Selection.Collapse
  
    End With

End Sub

Sub format_UserNote(i)

    With ActiveDocument
    
    Selection.Find.ClearFormatting
    Selection.Find.Replacement.ClearFormatting
        
    With Selection.Find
        .Text = "User Note: "
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindStop
        .Format = False
        .MatchCase = True
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With

    .Tables(i).Select
    
    Selection.Find.Execute
    If Selection.Find.Found = True Then
        Selection.SelectRow
 '       Selection.Expand (wdTableRow)
 '       Selection.Expand (wdParagraph)
        Selection.Font.ColorIndex = wdAuto
        Selection.Font.Italic = True
        Selection.Font.Bold = False
        Selection.ParagraphFormat.LeftIndent = InchesToPoints(0.5)
        Selection.Find.Execute Replace:=wdReplaceOne
    End If
    Selection.Collapse
    
    End With

End Sub


Sub RemoveEmptyParagraphs()

    Selection.Find.ClearFormatting
    Selection.Find.Replacement.ClearFormatting
    Selection.Find.Replacement.Font.Underline = wdUnderlineSingle
    With Selection.Find
        .Text = "^p^$"
        .Replacement.Text = "^&"
        .Forward = True
        .Wrap = wdFindContinue
        .Format = True
        .MatchCase = True
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    Selection.Find.Execute Replace:=wdReplaceAll
    
    Selection.Find.ClearFormatting
    Selection.Find.Font.Italic = True
    Selection.Find.Replacement.ClearFormatting
    Selection.Find.Replacement.Font.Underline = wdUnderlineSingle
    With Selection.Find
        .Text = "^p"
        .Replacement.Text = "^&"
        .Forward = True
        .Wrap = wdFindContinue
        .Format = True
        .MatchCase = True
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    Selection.Find.Execute Replace:=wdReplaceAll
    
    Selection.Find.ClearFormatting
    Selection.Find.Font.Underline = wdUnderlineSingle
    Selection.Find.Replacement.ClearFormatting
    With Selection.Find.Replacement.Font
        .Bold = True
        .Underline = wdUnderlineSingle
    End With
    With Selection.Find
        .Text = "^p"
        .Replacement.Text = "^&"
        .Forward = True
        .Wrap = wdFindContinue
        .Format = True
        .MatchCase = True
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    Selection.Find.Execute Replace:=wdReplaceAll
    
    Selection.Find.ClearFormatting
    Selection.Find.Font.Bold = False
    Selection.Find.Replacement.ClearFormatting
    With Selection.Find
        .Text = "^p"
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindContinue
        .Format = True
        .MatchCase = True
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    Selection.Find.Execute Replace:=wdReplaceAll
    
    Selection.Find.ClearFormatting
    Selection.Find.Font.Underline = wdUnderlineSingle
    Selection.Find.Replacement.ClearFormatting
    Selection.Find.Replacement.Font.Underline = wdUnderlineNone
    With Selection.Find
        .Text = "^p^$"
        .Replacement.Text = "^&"
        .Forward = True
        .Wrap = wdFindContinue
        .Format = True
        .MatchCase = True
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    Selection.Find.Execute Replace:=wdReplaceAll
    
    
     Selection.Find.ClearFormatting
    Selection.Find.Replacement.ClearFormatting
    With Selection.Find.Replacement.Font
        .Bold = False
        .Italic = False
    End With
    With Selection.Find
        .Text = "^p"
        .Replacement.Text = "^p"
        .Forward = True
        .Wrap = wdFindContinue
        .Format = True
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    Selection.Find.Execute Replace:=wdReplaceAll
        
 
End Sub

Sub Remove_Export_Tag()

    Selection.Find.ClearFormatting
    With Selection.Find
        .Text = "Export Tag: "
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindAsk
        .Format = False
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    
    Selection.HomeKey Unit:=wdStory
    Do While Selection.Find.Execute
        Selection.Rows.Delete
    Loop
    
End Sub


Sub keepTableWithQuestion(i As Integer)

    Dim questionRange As Range

    
    If ActiveDocument.Tables(i).Columns.Count > 1 And i >= 2 Then

        Dim qrng As Range
        Set qrng = ActiveDocument.Tables(i - 1).Range
        qrng.End = ActiveDocument.Tables(i).Range.End
        Debug.Print "Table index: i=" & i
        Debug.Print "Question: " & qrng
        qrng.ParagraphFormat.KeepWithNext = True
        
    End If

End Sub

Sub number_questions_field()
'
' Numbers questions in the survey preview
' Run as part of the format_survey_preview macro.

'
'    With ActiveDocument
    
    Dim tbl As Table
    
    Selection.Find.ClearFormatting
    With Selection.Find
        .Text = "Export Tag: "
        .MatchCase = True
    End With
    
    For Each tbl In ActiveDocument.Tables
        If tbl.Columns.Count = 1 Then
            'identify if the first column says export tag"
            tbl.Select
            Selection.Find.Execute
            If Selection.Find.Found = True Then
                qrow = 2
            Else: qrow = 1
            End If
            
            tbl.Rows(qrow).Select
            Selection.Collapse (wdCollapseStart)
            
            Selection.Fields.Add Range:=Selection.Range, Type:=wdFieldEmpty, Text:= _
                "SEQ QNUM", preserveFormatting:=False
            Selection.Collapse (wdCollapseEnd)
            Selection.TypeText (". ")
        End If
    Next
        
End Sub

Sub Remove_Responses_Count()

    Selection.Find.ClearFormatting
    With Selection.Find
        .Text = "Responses: "
'        .Replacement.Text = "Responses"
        .Forward = True
        .Wrap = wdFindStop
        .Format = False
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    
    'Move to the top of the document
    Selection.HomeKey Unit:=wdStory
    Selection.Find.Execute
    Do While Selection.Find.Found = True
        Selection.Expand (wdLine)
        Selection.TypeText ("Responses")
        Selection.Collapse (wdCollapseEnd)
        Selection.Find.Execute
    Loop
    
End Sub

Sub clearText_sidebyside_displaypanel()
    
    Dim sText1 As String
    Dim sText2 As String
    
    sText1 = "Refer to the Display Logic panel for this question's logic."
    sText2 = "This question was split from a side-by-side question."
    Selection.Find.ClearFormatting
    With Selection.Find
        .Text = sText1
        .Wrap = wdFindContinue
    End With
    Do While Selection.Find.Execute
        If Selection.Information(wdWithInTable) Then
            Selection.Rows.Delete
        End If
    Loop
    
    With Selection.Find
        .Text = sText2
        .Wrap = wdFindContinue
    End With
    Do While Selection.Find.Execute
        If Selection.Information(wdWithInTable) Then
            Selection.Rows.Delete
        End If
    Loop
    
    
End Sub


Sub AppendixFields_Full()

    Application.ScreenUpdating = False
    
    ActiveDocument.ActiveWindow.View.ShowFieldCodes = True

    Dim i As Integer
    
'    i = 1
'
'    Do While i <= 50
'
    Selection.Fields.Add Range:=Selection.Range, Type:=wdFieldEmpty, Text:= _
    "SEQ Append1", preserveFormatting:=False
    Selection.PreviousField
    Selection.Fields.Add Range:=Selection.Range, Type:=wdFieldEmpty, _
    preserveFormatting:=False
    Selection.TypeText Text:="=MOD("
    Selection.NextField
    Selection.Collapse direction:=wdCollapseEnd
    Selection.TypeText Text:="-1,26)+1"
    
    Selection.MoveRight (3)
    Selection.PreviousField
    Selection.PreviousField
    
    Selection.Fields.Add Range:=Selection.Range, Type:=wdFieldEmpty, _
        preserveFormatting:=False
    Selection.TypeText Text:="SET A2Z"
    
    Selection.NextField
    Selection.PreviousField
    
    Selection.Collapse (wdCollapseEnd)
    
    Selection.Fields.Add Range:=Selection.Range, Type:=wdFieldEmpty, Text:= _
        "SEQ Append2", preserveFormatting:=False
    Selection.PreviousField
    Selection.Fields.Add Range:=Selection.Range, Type:=wdFieldEmpty, _
    preserveFormatting:=False
    Selection.TypeText Text:="=INT(("
    Selection.NextField
    Selection.Collapse direction:=wdCollapseEnd
    Selection.TypeText Text:="-1)/26)"
    
    Selection.MoveRight (3)
    Selection.PreviousField
    Selection.PreviousField

    Selection.Fields.Add Range:=Selection.Range, Type:=wdFieldEmpty, _
        preserveFormatting:=False
    Selection.TypeText Text:="SET AA2ZZ"
    
    Selection.PreviousField
    Selection.NextField
    
    Selection.Collapse (wdCollapseEnd)
    
    Selection.Fields.Add Range:=Selection.Range, Type:=wdFieldEmpty, _
        preserveFormatting:=False
    Selection.TypeText ("IF=" & Chr(34) & " " & Chr(34) & " " & Chr(34) & Chr(34))
    Selection.Fields.Add Range:=Selection.Range, Type:=wdFieldEmpty, Text:= _
        "AA2ZZ \* ALPHABETIC", preserveFormatting:=False
'    Selection.Fields.ToggleShowCodes
    Selection.PreviousField
    Selection.NextField
    Selection.Collapse (wdCollapseStart)
    Selection.MoveRight Unit:=wdCharacter, Count:=4

    
    Selection.Fields.Add Range:=Selection.Range, Type:=wdFieldEmpty, Text:= _
        "AA2ZZ \* ALPHABETIC", preserveFormatting:=False
    
    
    Selection.PreviousField
    Selection.NextField
    Selection.Collapse (wdCollapseEnd)
    
    Selection.Fields.Add Range:=Selection.Range, Type:=wdFieldEmpty, Text:= _
        "A2Z \* ALPHABETIC", preserveFormatting:=False
    Selection.PreviousField
    Selection.NextField
    Selection.Collapse (wdCollapseEnd)
    
    Selection.MoveLeft Unit:=wdCharacter, Count:=4, Extend:=wdExtend
    
    Selection.Fields.Add Range:=Selection.Range, Type:=wdFieldEmpty, _
        preserveFormatting:=False
    Selection.TypeText ("QUOTE")
'
'    Selection.Expand (wdParagraph)
'    Selection.Collapse (wdCollapseEnd)
'    Selection.TypeText (Chr(10))
'
'    i = i + 1
'
'   ActiveDocument.ActiveWindow.View.ShowFieldCodes = False
'
'    Loop

'    Application.ScreenUpdating = True



ActiveDocument.Fields.Update

End Sub


Sub na_table_formatting_separate()
    
    Dim na_table As Table
    Dim n As Integer
    Dim i As Integer
    Dim t As Integer
    
    n = ActiveDocument.Tables.Count
    i = 1
    
    Selection.HomeKey Unit:=wdStory

    Selection.Find.ClearFormatting
    With Selection.Find
        .Text = "Total N"
        .Font.Italic = True
        .Font.ColorIndex = wdGray50
        .Forward = True
    End With
    
    Selection.Find.Execute
    
    Do While Selection.Find.Found = True And i <= n
    
        t = ActiveDocument.Range(0, Selection.Tables(1).Range.End).Tables.Count
        Debug.Print ("Table index: " & t)
'        na_table = ActiveDocument.Tables(t)
        
        Call format_NA_table(ActiveDocument.Tables(t))
        
        ActiveDocument.Tables(t).Select
        Selection.Collapse (wdCollapseEnd)
        
        i = i + 1
        Selection.Find.Execute
    Loop


End Sub

Sub define_preview_text_styles()

    On Error Resume Next
    ActiveDocument.Styles("AppendixQ_style").Delete
    
    ActiveDocument.Styles.Add Name:="AppendixQ_style", Type:=wdStyleTypeParagraph
    
    With ActiveDocument.Styles("AppendixQ_style")
    
        With .Font
            .Name = "Arial"
            .Size = 10
            .Color = wdColorAutomatic
        End With
        
        With .ParagraphFormat
            .SpaceAfterAuto = False
            .SpaceAfter = 5
            .SpaceBeforeAuto = False
            .SpaceBefore = 5
        End With
        
    End With
    
    
    
    On Error Resume Next
    ActiveDocument.Styles("AppendixName_style").Delete
    
    ActiveDocument.Styles.Add Name:="AppendixName_style", Type:=wdStyleTypeParagraph
    
    With ActiveDocument.Styles("AppendixName_style")
        With .Font
            .Name = "Arial"
            .Size = 10
            .Color = wdColorAutomatic
            .Bold = True
        End With
        
        With .ParagraphFormat
            .SpaceAfterAuto = False
            .SpaceAfter = 5
            .SpaceBeforeAuto = False
            .SpaceBefore = 5
        End With
        
    End With
    
    
End Sub

Sub insert_appendix_TOC_at_cursor()

    Selection.Fields.Add Range:=Selection.Range, Type:=wdFieldEmpty, Text:= _
                "TOC \o " & Chr(34) & "1-3" & Chr(34) & _
                "\n " & Chr(34) & "4-4" & Chr(34) & "\h \z \t " & Chr(34) & _
                "AppendixQ_style,4,AppendixName_style,3" & Chr(34), _
                preserveFormatting:=False

    Selection.Collapse
ActiveDocument.Fields.Update

End Sub

Sub insert_blocks_TOC_at_cursor()
    
    Selection.Fields.Add Range:=Selection.Range, Type:=wdFieldEmpty, Text:= _
                "TOC \h \t " & Chr(34) & _
                "Heading 5,1" & Chr(34), _
                preserveFormatting:=False
                
    Selection.Collapse
ActiveDocument.Fields.Update

End Sub

Sub format_TOC_styles()

With ActiveDocument
    
    'First level regular TOC
    
    With .Styles("TOC 1")
        .Font.Name = Arial
        .Font.Bold = True
        .Font.Italic = False
        .ParagraphFormat.LeftIndent = 0
    End With
    
    'Second level regular TOC
    With .Styles("TOC 2")
        .Font.Name = Arial
        .Font.Bold = False
        .Font.Italic = True
        .ParagraphFormat.LeftIndent = InchesToPoints(0.15)
    End With
    
    With .TablesOfContents
    
    'First level appendices
    
    With .Styles("TOC 3")
        .Font.Name = Arial
        .Font.Bold = True
        .Font.Italic = False
        .ParagraphFormat.LeftIndent = 0
    End With
    
    'Second level regular TOC
    With .Styles("TOC 4")
        .Font.Name = Arial
        .Font.Bold = False
        .Font.Italic = True
        .ParagraphFormat.LeftIndent = InchesToPoints(0.15)
    End With
End With

End Sub


Sub add_appendix_ref_to_body()

Application.ScreenUpdating = True

'Use this after combining the documents; the appendix should be inserted
'   as the last section of the document

Dim hasAppendix As Boolean
Dim exportTag As String
Dim tbl As Table
Dim i As Integer

Dim exportTag_col As String

For i = 1 To ActiveDocument.Sections.Count - 1
    
For Each tbl In ActiveDocument.Sections(i).Range.Tables
    hasAppendix = False
    exportTag = ""
    exportTag_col = ""
    Selection.Find.ClearFormatting
    Selection.Find.Text = "See Appendix"
    tbl.Select
    Selection.Find.Execute
    If Selection.Find.Found = True Then
        hasAppendix = True
    Else: GoTo Next_tbl
    End If
    
    If hasAppendix = True And tbl.Columns.Count = 1 Then
        exportTagInfo = identifyExportTag(tbl)
        exportTag = exportTagInfo(0)
        exportRow = exportTagInfo(1)
        
    End If
        
    If (Not exportTag = "") And (ActiveDocument.Bookmarks.Exists(exportTag) = True) Then
        tbl.Select
        Selection.Find.ClearFormatting
        Selection.Find.Text = "Appendix"
        Selection.Find.Execute
            Selection.Expand (wdCell)
            Selection.TypeText ("See ")
            Selection.InsertCrossReference ReferenceType:="Bookmark", ReferenceKind:= _
                wdContentText, ReferenceItem:=exportTag, InsertAsHyperlink:=True, _
                IncludePosition:=False, SeparateNumbers:=False, SeparatorString:=" "
            Selection.Expand (wdCell)
            With Selection.Font
                .Bold = True
                .Italic = True
                .ColorIndex = wdAuto
            End With
            
        'This has been added to fix issue with appendix cross ref formatting disappearing
            'after fields are updated. Thanks to Rebecca Hatch for initially finding the solution
            'in her work with grad exit
            'Macro taken from this online posting:
                'http://www.msofficeforums.com/word-vba/34181-vba-code-search-field-codes-certain-text.html
            
        For Each Fld In tbl.Range.Fields
            Set Rng = Fld.Code.Words.First.Previous.Previous
          Rng.MoveStart wdWord, -1
          If Rng.Text = "See" Then
            Fld.Code.Text = Fld.Code.Text & "\* Charformat "
          End If
        Next
            
    ElseIf Not exportTag = "" Then GoTo Next_tbl
        
    Else
        Selection.Find.ClearFormatting
        Selection.Find.Text = "See Appendix "
        Selection.Find.Font.Bold = False
        Selection.Find.Font.Italic = False
        tbl.Select
        Selection.Find.Execute
        Do While Selection.Find.Found = True
            
            Dim appendRef_row As Integer
            Dim appendRef_col As Integer
            Dim appendRef_text As String
            Dim appendRefCell As Range
            Dim appendBookmark As String
            
            Selection.Font.Bold = True
            Selection.Font.ColorIndex = wdDarkRed
            
            appendRef_row = Selection.Information(wdStartOfRangeRowNumber)
            appendRef_col = Selection.Information(wdStartOfRangeColumnNumber)
            
            appendRefCell_text_full = tbl.Cell(appendRef_row, appendRef_col).Range.Text
            seeAppend_index = InStr(appendRefCell_text_full, "See Appendix ")
            itemText = Left(appendRefCell_text_full, seeAppend_index - 1)
            
            appendBookmark = Mid(appendRefCell_text_full, seeAppend_index + 13, _
                Len(appendRefCell_text_full) - (seeAppend_index + 14))
            Debug.Print ("Item text: " & itemText & Chr(10) & "Bookmark: " & appendBookmark)
            
            If ActiveDocument.Bookmarks.Exists(appendBookmark) = True Then
            
                Selection.Expand (wdCell)
                
                Selection.TypeText ("See ")
                Selection.InsertCrossReference ReferenceType:="Bookmark", ReferenceKind:= _
                    wdContentText, ReferenceItem:=appendBookmark, InsertAsHyperlink:=True, _
                    IncludePosition:=False, SeparateNumbers:=False, SeparatorString:=" "
                
                Selection.Expand (wdCell)
                Selection.Font.Bold = True
                Selection.Font.Italic = True
                Selection.Collapse (wdCollapseStart)
                Selection.Font.Bold = False
                Selection.Font.Italic = False
                Selection.TypeText (itemText)
                
            End If
            
            tbl.Select
            Selection.Find.Execute
        Loop

    End If
    
    Selection.Collapse
   
Next_tbl:     Next tbl

Next i
    
End Sub
